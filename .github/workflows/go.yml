name: Go

on:
  push:
    branches: [ master ]
    paths: 
      - 'apis/trips/**'
      - '.github/workflows/go.yml'
  pull_request:
    branches: [ master ]
    paths: 
      - 'apis/trips/**'
      - '.github/workflows/go.yml'

jobs:

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.13
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi

    - name: Build
      run: |
        cd apis/trips
        go build


    - name: Test
      run: |
        cd apis/trips
        go test
    - uses: actions/github-script@0.9.0
      if: failure()
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
          github.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
            body: body
          });
  build:
    needs: [test]
    runs-on: ubuntu-latest
    env:
        working-directory: ./apis/trips
        app-name: openhackf4r03460trips
        image-name: trips
        container-registry: docker.pkg.github.com
        docker-username: "cdennig"
    if: github.ref == 'refs/heads/master'
    steps:
    - uses: actions/checkout@v2    
    - name: Build & Push Image
      working-directory: ${{ env.working-directory }}
      run: |
        docker login ${{ env.container-registry }} --username ${{ github.actor }} --password ${{ secrets.GITHUB_TOKEN }}
        docker build -t ${{ env.container-registry }}/cdennig/openhackteam4/${{ env.image-name }}:${{ github.sha }} .
        docker push ${{ env.container-registry }}/cdennig/openhackteam4/${{ env.image-name }}:${{ github.sha }}
    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Set Web App CR authentication
      uses: Azure/appservice-settings@v1
      with:
       app-name: ${{ env.app-name }}
       app-settings-json: |
         [
             {
                 "name": "DOCKER_REGISTRY_SERVER_PASSWORD",
                 "value": "${{ secrets.PULL_PWD }}",
                 "slotSetting": false
             },
             {
                 "name": "DOCKER_REGISTRY_SERVER_URL",
                 "value": "https://${{ env.container-registry }}",
                 "slotSetting": false
             },
             {
                 "name": "DOCKER_REGISTRY_SERVER_USERNAME",
                 "value": "${{ env.docker-username }}",
                 "slotSetting": false
             }
         ]
    - uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.app-name }}
        slot-name: 'staging'
        images: '${{ env.container-registry }}/cdennig/openhackteam4/${{ env.image-name }}:${{ github.sha }}'
    # - name: Swap slots
    #   uses: azure/CLI@v1
    #   with:
    #     azcliversion: 2.11.1
    #     inlineScript: |
    #       az webapp deployment slot swap --name openhackf4r03460trips --resource-group openhackf4r03460rg --slot staging --target-slot production
  Validate Staging:
    runs-on: ubuntu-latest
    - uses: azure/CLI@v1
      with:
        azcliversion: 2.11.1
        inlineScript: |
          declare -i duration=10
          declare hasUrl=""
          declare endpoint
          declare -i status200count=0

          endpoint="https://openhackf4r03460trips-staging.azurewebsites.net/api/healthcheck/poi"

          healthcheck() {
              declare url=$1
              result=$(curl -i $url 2>/dev/null | grep HTTP/1.1)
              echo $result
          }

          for i in {1..12}
          do
            result=`healthcheck $endpoint` 
            declare status
            if [[ -z $result ]]; then 
              status="N/A"
              echo "Site not found"
            else
              status=${result:9:3}
              timestamp=$(date "+%Y%m%d-%H%M%S")
              if [[ -z $hasUrl ]]; then
                echo "$timestamp | $status "
              else
                echo "$timestamp | $status | $endpoint " 
              fi 
              
              if [ $status -eq 200 ]; then
                ((status200count=status200count + 1))

                if [ $status200count -gt 5 ]; then
                    break
                fi
              fi

              sleep $duration
            fi
          done

          if [ $status200count -gt 5 ]; then
            echo "API UP"
            # APISTATUS is a pipeline variable
            APISTATUS="Up"
          else
            echo "API DOWN"
            APISTATUS="Down"
            exit 1;
          fi
